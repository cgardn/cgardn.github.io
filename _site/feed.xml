<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-02-18T14:40:59-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chris Gardner | Fullstack Dev</title><subtitle>I'm Chris Gardner, a web developer and biomedical engineer. Ask me anything!</subtitle><entry><title type="html">It&amp;#8217;s Been A Minute</title><link href="http://localhost:4000/2021/01/08/It's-been-a-minute.html" rel="alternate" type="text/html" title="It&amp;#8217;s Been A Minute" /><published>2021-01-08T23:00:00-05:00</published><updated>2021-01-08T23:00:00-05:00</updated><id>http://localhost:4000/2021/01/08/It's-been-a-minute</id><content type="html" xml:base="http://localhost:4000/2021/01/08/It's-been-a-minute.html">&lt;p&gt;Just like that, 9 months later.&lt;/p&gt;

&lt;p&gt;Shortly after the last post, I was contacted through a thread on hackernews
and offered a spot on a small startup team working in the Mozilla Builders
program. I spent most of the rest of the year building a VueJS SPA frontend
solo and assisting on a NodeJS/MongoDB backend. The short version is, this
as-of-yet-unnamed startup is on indefinite hiatus due to a variety of
team-related obstacles, but maybe I’ll get to tell you about it someday :)&lt;/p&gt;

&lt;p&gt;Oh, and 2020 happened, too.&lt;/p&gt;

&lt;h1 id=&quot;but-now-its-a-new-year-and-that-means-new-things&quot;&gt;But, now it’s a new year, and that means new things!&lt;/h1&gt;

&lt;p&gt;I rewrote the &lt;a href=&quot;https://cgardn.github.io/hyperchef/&quot;&gt;Hyperchef&lt;/a&gt; frontend in
VueJS, because Vue is ~amazing.~ The Rails app got a full set of api routes,
and was upgraded to Rails 6. It doesn’t look too different, but there’s a few
decently large new things I want to go over:&lt;/p&gt;

&lt;h2 id=&quot;recipe-filter-buttons-that-actually-work&quot;&gt;Recipe filter buttons that actually work&lt;/h2&gt;
&lt;p&gt;One of the main goals I had for Hyperchef was to make recipe discovery more
natural, and by that I mean more aligned with the way I personally think about
coming up with something to eat.&lt;/p&gt;

&lt;p&gt;My experience may not be universal, but I have two main problems when figuring
out what to cook:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;meal planning is a lot of mental energy&lt;/li&gt;
  &lt;li&gt;tracking kitchen inventory is a lot of mental energy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No matter how well thought out or well-intentioned my shopping trips are, I
still wind up with a mish-mash of ingredients and leftovers, and even when I
find a recipe that I’d like to try, I never have everything I need.&lt;/p&gt;

&lt;p&gt;Hyperchef’s solution to this is inclusive/exclusive filter buttons of
ingredients, sorted by ingredient category. I want to approach recipe
discovery by just looking in the fridge and tapping all the things I actually
have, and see what recipes pop up. This drastically reduces the time spent
hunting through recipes, because by the time you’re actually reading one
you’re already guaranteed to have everything you need on hand.&lt;/p&gt;

&lt;p&gt;Selecting a filter is instant, removing everything that doesn’t include
whatever you just picked. Select “tomato paste,” and all recipes with no
tomato paste are gone. Adding additional filters further narrows your
selection. In the future you’ll have additive-exclusive filters too, like
adding all the recipes that &lt;em&gt;don’t&lt;/em&gt; have chicken, for example.&lt;/p&gt;

&lt;p&gt;I think it’s pretty effective in practice, though there’s hardly any actual
recipe content yet (I’m working on it). It also led to a somewhat radical
design choice - there’s no text search bar. I don’t think it’s necessary, at
least for me. I only know what ingredients I have on hand, and
typing 5 or 10 things into a text box and hoping it gets what I mean is
annoying. Or even worse, searching for one of the ingredients and hoping
there’s a decent “advanced filters” option after I wait through the initial
search.&lt;/p&gt;

&lt;h3 id=&quot;how-its-done&quot;&gt;How it’s done&lt;/h3&gt;
&lt;p&gt;Each thing that can be searched by (a ‘filter’) has a specific set of recipes
that it applies to, so each filter gets an array with all those recipe IDs.
Since array intersections are commutative, it’s just a series of array
intersections between the selected filters’ recipe lists and the list of all
recipes.&lt;/p&gt;

&lt;p&gt;These lists are built for recipe types (breakfast, dinner), and ingredients
(beef, tomato paste). There are plans to include ingredient tags (meat,
vegetable) as toggles too, plus other categories (kosher, halal).&lt;/p&gt;

&lt;p&gt;All of these lists live in a hash, keyed by the text name of the filter. This
keeps things quick when finding the list for whatever button was pushed.&lt;/p&gt;

&lt;p&gt;After the intersections are done, the remaining list of ids is checked against
a hash of all the recipes, where each key is the numerical recipe ID. This is
because as recipes are added or deleted, the recipe IDs may not remain a
contiguous set of numbers, so I need a hash to guarantee direct access and
avoid array searching. Assigning recipes to a particular spot in an array
matching their ID would waste space on empty array slots for IDs that aren’t
used.&lt;/p&gt;

&lt;h2 id=&quot;caching-on-the-backend&quot;&gt;Caching on the backend&lt;/h2&gt;
&lt;p&gt;That brings me to the next piece - making it efficient. Performing these array
operations on the backend could work just fine, but my budget for server time
is extremely limited, so a primary design goal was pushing as much computation
to the client as possible. Since all the filter arrays are static data, I
put them in Rails’ memory cache and send everything to the client on the
initial pageload, where Vue handles the actual array operations.  The only
recipe data required for the search page is just what’s required to display on
the clickable cards (title, required time, and a numerical score for
ingredient count and relative complexity). Since there’s no ads and just one
image (the hero graphic), the total pageload size is still quite small - the
search data for the test database of 500 recipes fits into less than 100kB.
There’s also plenty of room left for optimization, like shrinking the
attribute names to reduce the number of characters being sent. If I ever find
the time to grow the recipe count into the thousands I may need a different
strategy, but that’s a long way down the road from here.&lt;/p&gt;

&lt;h2 id=&quot;admin-panel&quot;&gt;Admin panel&lt;/h2&gt;
&lt;p&gt;No one will ever see them, but I added basic admin panels for adding and
editing the resources - which is good, because they’re incredibly ugly ;)&lt;/p&gt;

&lt;h2 id=&quot;minor-design-change&quot;&gt;Minor design change&lt;/h2&gt;
&lt;p&gt;Finally, there’s a slightly new look as well - the custom images are gone,
replaced with a much lighter flat theme with Bootstrap (css only).  No fancy
transitions yet as there hasn’t been a lot of time for polish, but that’s
coming Soon™.&lt;/p&gt;

&lt;p&gt;Overall, I’m happy with the progress, but not the current state. There’s a ton
of things on the TODO list, including but not limited to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;More compact design of the filter panel&lt;/li&gt;
  &lt;li&gt;MUCH more content&lt;/li&gt;
  &lt;li&gt;Toggling whole filter categories at once&lt;/li&gt;
  &lt;li&gt;Dietary restrictions as filters (gluten-free, Jain-friendly, etc)&lt;/li&gt;
  &lt;li&gt;Actual consideration of modern aesthetics&lt;/li&gt;
  &lt;li&gt;CSS transitions to make it *fancy*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m focused on the job hunt for now, but once things settle down progress will
continue. Onward!&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">Just like that, 9 months later.</summary></entry><entry><title type="html">Remote Form Submission In Rails&amp;#8230;?</title><link href="http://localhost:4000/2020/04/09/Remote-form-submission-in-Rails/html" rel="alternate" type="text/html" title="Remote Form Submission In Rails&amp;#8230;?" /><published>2020-04-09T00:00:00-04:00</published><updated>2020-04-09T00:00:00-04:00</updated><id>http://localhost:4000/2020/04/09/Remote-form-submission-in-Rails/Remote-form-submission-in-Rails...</id><content type="html" xml:base="http://localhost:4000/2020/04/09/Remote-form-submission-in-Rails/html">&lt;h2 id=&quot;preamble&quot;&gt;Preamble&lt;/h2&gt;

&lt;p&gt;Hyperchef handles nearly all its buttons as forms. My first instinct was to 
make them AJAX calls, as is the modern way, but I immediately discovered that
documentation on using JS in Rails is…let’s go with “incomplete.” In the mad
scramble to accomplish &lt;del&gt;something&lt;/del&gt; anything, I decided to save time on digging
for answers by doing form submissions by plain ‘ol HTML requests.&lt;/p&gt;

&lt;p&gt;It’s been bugging me ever since that every button push triggers a full page
refresh, but it was good enough to keep going while I pushed through building
and learning at the same time.&lt;/p&gt;

&lt;h2 id=&quot;that-brings-us-to-today&quot;&gt;That brings us to today&lt;/h2&gt;

&lt;p&gt;Now that all the basic pieces were finally complete, along with a (very) small
set of sample data, it was time to get it done. Here’s what I was up against:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;rails-5&quot;&gt;Rails 5&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;I know Rails 6 came out a while ago, but I learned on
Rails 5 and this is supposed to be Baby’s First Real Project, so I stuck
with what I knew.&lt;/li&gt;
      &lt;li&gt;Most of the Rails 5 documentation is out of date or incomplete. Even the
official rubyguides and edgeguides don’t really tell you what to do or
where to put the various JS files. Also, the Hartl tutorial doesn’t really
go into this too much, and the old 4th edition is no longer free anyway.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;rails-has-long-history&quot;&gt;Rails has long history&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;Since Rails has been around for 15 years, and its peak popularity is
behind us, the majority of Stack Overflow questions are from outdated
versions or make extensive use of jQuery (ew), which no longer ships with Rails
as of v5.1. ES6 and the modern Web API are so great, I want to only write
things using modern tools when possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;most-blog-posts-are-half-a-solution&quot;&gt;Most blog posts are half a solution&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;I don’t expect to find everything in one convenient place, but most of the
blogs I found about JS in Rails just kind-of-sort-of tell you how to use
respond_to to make a basic API response, with no details about how Rails
views interact with Javascript, where *.js files are supposed to go 
and what JS functions are available in what place, or anything I needed to
know to add JS flavor to my bland Rails soup. Given the popularity of
Rails at bootcamps over the last decade, I have a sneaking suspicion that
most of these incomplete posts are some kind of homework assignment: hastily prepared,
missing key information, and usually hosted on Medium (ew again).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;assumed-expert-knowledge&quot;&gt;Assumed expert knowledge&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;This is a more general problem I’m sure we all face when learning
something new, but nearly every source of information that isn’t written
by an amateur like me assumes expert-level knowledge in web development.
I had to piece the answers together from multiple different sources who
each left out key basic information on how the Rails system fits together.
In this case, nobody explained the actual flow from
view-&amp;gt;controller-&amp;gt;Javascript view in a way that a first-timer like me can
understand.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facing these beasts, I girded my loins, holstered coffee and snacks, and
forged into the unkempt wilds of Rails information and emerged at last
victorious. So here for you, dear reader, are the spoils of my victory.&lt;/p&gt;

&lt;p&gt;(and before you say it, I know most of this is pretty basic, and Rails 6 changed
a lot of this. I just want to document my success)&lt;/p&gt;

&lt;h1 id=&quot;how-to-do-remote-forms-links-and-other-javascript-things-in-rails-5&quot;&gt;HOW TO DO REMOTE FORMS, LINKS, AND OTHER JAVASCRIPT THINGS IN RAILS 5&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;First you make a form. I use &lt;code class=&quot;highlighter-rouge&quot;&gt;form_with&lt;/code&gt;, but you can do it however you
like.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;In Rails 5, all forms made with a form helper are remote &lt;strong&gt;by default.&lt;/strong&gt;
This means that every form you make will submit the params “as JS,” which
you will see on the server logs when you click the button. The page won’t
refresh, and you won’t see any errors if something isn’t right.&lt;/li&gt;
      &lt;li&gt;Make sure the form submits to the controller action you’re trying to call.
This can be anything, really, so long as you follow the &lt;code class=&quot;highlighter-rouge&quot;&gt;respond_to&lt;/code&gt;
step below and create the *.js.erb file for whatever action you’re using.&lt;/li&gt;
      &lt;li&gt;You can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;button_to&lt;/code&gt; if all you want is something to click on,
with no input (more on that at the end).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write the respond_to block&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;This part is actually explained in a lot of places. In order to have the
controller respond to anything other than an HTML request, you have to
include a block like this:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;respond_to |format| do
  format.html {}
  format.js {}
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;Let’s say you put this at the bottom of #index action of a controller.
What this means, is that
when an HTML query is received, the controller will do whatever you put in
the {} after &lt;code class=&quot;highlighter-rouge&quot;&gt;format.html&lt;/code&gt;, and then generate the view from index.html.erb
as normal.  Similarly, when a JS request is received, the controller will do
everything above the &lt;code class=&quot;highlighter-rouge&quot;&gt;respond_to block&lt;/code&gt;, then do everything inside the
{} after &lt;code class=&quot;highlighter-rouge&quot;&gt;format.js&lt;/code&gt;, then generate a view from &lt;strong&gt;index.js.erb&lt;/strong&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a *.js.erb file, and stick all your Javascript in there&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Here’s the key point:&lt;/strong&gt; index.js.erb isn’t actually a different index
view. It’s just a regular javascript file, and you can use whatever JS you
want to change the DOM however you want. However, because you can also use
ERB, you have access to the full boat of controller instance variables &lt;em&gt;and&lt;/em&gt;
you can render partials, so you can select whatever part of the DOM you want
to update with data from the controller as you so desire.&lt;/p&gt;

        &lt;p&gt;There’s actually quite a bit more going on to make these AJAX requests work,
but Rails handles it all behind the scenes for you with the &lt;code class=&quot;highlighter-rouge&quot;&gt;rails-ujs&lt;/code&gt;
gem, which is now a built-in part of Rails as of v5.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that’s basically it! It’s confusing the first time you go through it, but
once you see where the different *.js.erb files go and how to call them, it
becomes pretty easy. For the experienced readers, I know this is all, like,
super basic, but at the time I was looking there wasn’t a single place where all
these pieces were presented together.&lt;/p&gt;

&lt;p&gt;Here’s that bit about &lt;code class=&quot;highlighter-rouge&quot;&gt;button_to&lt;/code&gt; I mentioned earlier. The reason I wanted
remote forms, was for switching recipe measurement units from imperial to metric
without reloading the page. This meant making a call to the controller with
whatever units I was asking for in the params.&lt;/p&gt;

&lt;p&gt;My first attempt was to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;link_to&lt;/code&gt; and stuffing query params into the
GET request. I thought it would be Better™ to put the user’s choice in the
URL bar as GET params, so they could bookmark their preferred version.&lt;/p&gt;

&lt;p&gt;Turns out my original method for sorting that out was a pile of hot garbage. I
had to construct some truly outrageous param whitelist setups to get it to work
at all, and then one tiny change would goof it all up again.&lt;/p&gt;

&lt;p&gt;In the end, I replaced the link helpers with just a couple of divs styled to
look like buttons, and attached JS Event listeners in the
app/assets/javascripts/*.js file for that view. Another nice thing about
&lt;code class=&quot;highlighter-rouge&quot;&gt;rails-ujs&lt;/code&gt; is a convenient wrapper for submitting forms programatically
with JS: &lt;code class=&quot;highlighter-rouge&quot;&gt;Rails.fire(form, 'submit')&lt;/code&gt;, where ‘form’ is a reference to the
form element on the page you pick out with a query selector. That’s the other
thing: That app/assets/javascripts folder is where you can make view-specific JS
files that will run when the page is first loaded - this is where you attach
Event listeners.&lt;/p&gt;

&lt;p&gt;Oh, one more thing - speaking of Event listeners, if you’re using Turbolinks,
you can’t attach to the pageload event, because Turbolinks’ whole thing is
skipping a full reload to save time. Instead, you have to attach to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;turbolinks:load&lt;/code&gt; event, like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  document.addEventListener(&quot;turbolinks:load&quot;, function() {
    do_something_neat();
  })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;Hopefully if you’re a noob like I was, this will help you. I also certainly hope
that you will email me if I’ve made a mistake! If you’re reading this and you 
think it needs more explanation or I’m missing some key part, please drop me a
line and I’ll make it more complete!&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">Preamble</summary></entry><entry><title type="html">Finished Tests For Now, I Think</title><link href="http://localhost:4000/2020/04/06/finished-tests-for-now,-I-think.html" rel="alternate" type="text/html" title="Finished Tests For Now, I Think" /><published>2020-04-06T00:00:00-04:00</published><updated>2020-04-06T00:00:00-04:00</updated><id>http://localhost:4000/2020/04/06/finished-tests-for-now,-I-think</id><content type="html" xml:base="http://localhost:4000/2020/04/06/finished-tests-for-now,-I-think.html">&lt;p&gt;My test coverage has officially gone from zero to some. Now tests cover every
user-facing page for a successful response, every resource-modifying action
(create, update, destroy) for unauthorized access, and as many of the model
functions as I could manage without associations; as I mentioned last time I
haven’t figured out how to get those working in the test environment yet.&lt;/p&gt;

&lt;h3 id=&quot;things-writing-tests-has-exposed-about-my-code&quot;&gt;Things writing tests has exposed about my code&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Code in the wrong place
    &lt;ul&gt;
      &lt;li&gt;A recipe model function that deals mostly with ingredients was not only
obseleted by something I changed a while ago, but is now on wrong model
entirely. It was probably on the wrong model to begin with, but I
couldn’t see that when I wrote it.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not enough done programatically
    &lt;ul&gt;
      &lt;li&gt;Ingredient units are stored in a hash of arrays, and each element of the
hash has a reasonably long name like “imperial_show” or “metric_list”.
It was the easiest/most sensible way I could think of to do unit
conversions quickly: bake them in by putting a single “standard serving”
on each ingredient in both imperial and metric units, then just multiply
by the servings the user chooses on the page. Later I’ll add a fudge
factor for recipes that are more than just protein+veg+starch.  However,
every time I want to build a new ingredient for a test, I have
to write out the whole hash with all the long names, because I never
thought of making a function to build the hash in one place.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other news, the last couple TODOs for the first terrible version of
Hyperchef are done. Those items were connecting ActionMailer to SendGrid for
password reset mail, and styling the devise views to (mostly) match the rest of
the site.&lt;/p&gt;

&lt;p&gt;My overall feeling about Hyperchef in its present state is…medium rare. It’s
a fairly arbitrary “launch,” and I’m definitely not done - I haven’t even built
all the core features like grocery lists and the meal planner - but part of me
can’t believe I’m actually about to finish a working version of something only
a month later. Wow, has it really been a month? That’s when github says my
first commit was, but time sure flew by.&lt;/p&gt;

&lt;p&gt;After adding a few more of my favorite recipes to start out, I’m going to dive
into a huge first refactor, and honestly I’m really excited about it. I like
fixing and cleaning things way more than building things, so I can’t wait to
pull out all the cruft that’s accumulated while I figured out what the heck I
was doing as I built. There’s quite a bit of old code that is now obseleted or
not even in use - I tend to leave things in place when I try new ideas. Not
sure if that’s bad practice, but at the (small) scale I’m working I think
having to come back later and sweep the closets is worth the time savings and
speed, since I’m trying something new about a hundred times each day.&lt;/p&gt;

&lt;p&gt;I’m also really lukewarm on the visual design now. Not the overall theme, I
like that part, but the way I’ve laid out the cards and especially all the
buttons just feels unprofessional and unfinished. I’m still getting the hang of
this front-end design business, but learning so much so fast has the
side-effect of constantly moving the goalpost of acceptable design. What looked
fine to me four weeks ago looked amateurish two weeks ago, and two-weeks-ago’s
fixes look garbage today. Constant improvement! But also constantly feeling
like it’s not good enough. It’s fine, I like how much my eye is changing, now I
just hope my skills can keep up.&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">My test coverage has officially gone from zero to some. Now tests cover every user-facing page for a successful response, every resource-modifying action (create, update, destroy) for unauthorized access, and as many of the model functions as I could manage without associations; as I mentioned last time I haven’t figured out how to get those working in the test environment yet.</summary></entry><entry><title type="html">Test Coverage At Last</title><link href="http://localhost:4000/2020/04/04/Test-Coverage-at-last.html" rel="alternate" type="text/html" title="Test Coverage At Last" /><published>2020-04-04T00:00:00-04:00</published><updated>2020-04-04T00:00:00-04:00</updated><id>http://localhost:4000/2020/04/04/Test-Coverage-at-last</id><content type="html" xml:base="http://localhost:4000/2020/04/04/Test-Coverage-at-last.html">&lt;p&gt;Spent the day working on test coverage, since I had basically none (oops *_*).
A little painful at first, but I’m getting the hang of it.  &lt;del&gt;Unfortunately&lt;/del&gt; I
got the &lt;em&gt;opportunity&lt;/em&gt; to learn a bunch of things, one of which is that I
probably shouldn’t require all attributes of a model to be present in order to
process an update. If only one attribute comes in, as long as it’s on the
whitelist the app shouldn’t get hung up on the attributes that aren’t there.
And manually typing in a bunch of params hashes for testing model updates has
made that painfully clear. :)&lt;/p&gt;

&lt;p&gt;I also ran into an as-of-yet-unsolved problem with test fixtures - how do I
describe ActiveRecord associations in YAML? I’m sure there’s some Railsy
special syntax sauce that will let me do it, but I tried the “official”
rubyguides way of id-less labelling and it didn’t do squat. The problem lies in
the _header partial, the navbar. When you’re logged in, the “Sign-in” button
is replaced with a “Profile” button, which for now just shows you a list of all
the recipes you’ve favorited (eventually that’s where you’ll make meal plans
and grocery lists and whatnot as well). That view creates the link with a
reference to current_user.user_profile, but user_profiles are a separate
model from users, connected through a join table, and since I can’t figure out
associations in the test fixtures, any testing that logs in and then visits any
page with the “Profile” link fails on account of not being able to load
current_user.user_profile and build the link.&lt;/p&gt;

&lt;p&gt;Sigh. This means that I can’t verify that the admin is allowed to do things
like create/update/destroy recipes, ingredients, or whatever. I have to be
satisfied with only verifying that non-logged-in and non-admin users &lt;strong&gt;can’t&lt;/strong&gt;
do those things, which is to say I’m not satisfied at all. In fact I’m super
bothered by it, but I spent quite a bit of time hunting through the tubes for
answers and got nothing, so I’m moving on to finish the rest of the tests and
come back after.&lt;/p&gt;

&lt;p&gt;That said, I’ve only gotten through recipes and most of ingredients. I still
have equipment and both kinds of tags. I haven’t even gotten to model testing
yet, though thankfully Hyperchef is still 99% REST so that stuff should go
quick when I get there.&lt;/p&gt;

&lt;p&gt;Other than that, I continue to march toward launching. Still need to add
roughly a billion more recipes to make it look real, not to mention that it
doesn’t look anything like a “modern” recipe website with giant pictures of
food or anything, but hopefully that doesn’t get in the way. I can always
change it if I get a lot of “Soo….this is it, huh?” from friends and family.&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">Spent the day working on test coverage, since I had basically none (oops *_*). A little painful at first, but I’m getting the hang of it. Unfortunately I got the opportunity to learn a bunch of things, one of which is that I probably shouldn’t require all attributes of a model to be present in order to process an update. If only one attribute comes in, as long as it’s on the whitelist the app shouldn’t get hung up on the attributes that aren’t there. And manually typing in a bunch of params hashes for testing model updates has made that painfully clear. :)</summary></entry><entry><title type="html">N+1</title><link href="http://localhost:4000/2020/03/31/N+1.html" rel="alternate" type="text/html" title="N+1" /><published>2020-03-31T00:00:00-04:00</published><updated>2020-03-31T00:00:00-04:00</updated><id>http://localhost:4000/2020/03/31/N+1</id><content type="html" xml:base="http://localhost:4000/2020/03/31/N+1.html">&lt;p&gt;One more step toward the finish line! Today I started with some styling stuff
pointed out to me yesterday: the unit conversions on recipe#show are
now radio buttons instead of a dropdown, and serving size is a dropdown instead
of a number input. I also changed the main search bar and filter button around
so you don’t have to go back up from the filter button to click search.
Hopefully that makes usage a little clearer until I can add JS to make the
filters update as you select them.&lt;/p&gt;

&lt;p&gt;Now on to the main event: removing all the N+1’s. Well, N+1 doesn’t cover it,
it was more like N+5. For example, right now the search button reloads the
whole page (I know, I know…I’m getting there). The point is, filters selected
for a query need to remain selected after the query returns results.
To do that, I was calling RecipeType.all.each (RecipeType is the recipe tag
model), and then on each tag I called that RecipeType’s recipe association,
THEN iterated through ALL the recipes that had that tag, comparing each 
recipe’s tags to see if one matched the user’s selected filter list. So I had
30-ish tags multiplied by dozens of recipes, and multiple database hits for
each. And all of this was happening right in the view!! Yeesh!&lt;/p&gt;

&lt;p&gt;It was the first way I did it just to get it done, but now every search with at
least one filter checked triggered a comparison of each tag on each recipe, and
it was blowing up the server log with a billion database calls, which wasn’t
just messy - it made finding errors in the log a real pain.&lt;/p&gt;

&lt;p&gt;Replacing the RecipeType association nonsense with a single #joins call saved
10-12 ms, which doesn’t seem like a lot, but if I ever got to multiple hundreds
of recipes and a serious amount of users, it’d add up pretty fast. I didn’t
measure the recipe tag time savings, but the same change on ingredient tags
went from 15 database hits per search at 27ms, to one hit at ~5.5ms. Honestly, 
I wasn’t expecting such a dramatic decrease!&lt;/p&gt;

&lt;p&gt;Fixing the tag-related calls was straightforward, but I also had a lot of calls
related to loading the recipe cards, and that took a little more thinking. Part
of it was the visual progress bars. Each card has a colored bar that shows at a
glance the recipe difficulty, the number of ingredients, and the time required
to go from “I’m hungry” to “Wow, that’s good!” I have 10 different images of
progress bars, showing levels from 1 to 10.&lt;/p&gt;

&lt;p&gt;The problem was that selecting the right image meant generating a score between
1 and 10, and in order to generate the scores I was making three database hits 
for each recipe returned by the search query - two to get cook time and prep
time (and linear transform the sum to the range 1-10), and one hit to count the
ingredients. However, I realized the attributes of a recipe only change when
the recipe is created or updated, so scores based on the attributes should only
be changed then, too.&lt;/p&gt;

&lt;p&gt;So now there’s two extra columns on the Recipe table, one for the time score
and one for the ingredient score (the difficulty is already just a 1-to-10
number I plug into the recipe form). Now for each query, I can just grab the
collection of recipes that matches the query, and pull the relevant attributes
for the entire collection in a single database operation.&lt;/p&gt;

&lt;p&gt;Ok, so I know this last one is going to sound pretty basic to the experienced
reader, but I’m still proud of it because I learned some new parts of Rails to
do it. The final big N+1 I had was pulling the logged-in user’s favorites list.
There’s a button on each recipe card that changes visual states depending on
whether the user has favorited that recipe. The original implementation was
just calling the UserProfile.favorites association for the logged-in user, then
lazy-loading each recipe one database-call at a time in the view. I figured out
how to use #eager_load and #where to pull all the user’s favorite recipes at
once, which cut the total pageload time almost in half! The actual number is
inflated by the dev environment baggage, but it’s still a big benefit. Progress!&lt;/p&gt;

&lt;p&gt;All in all this was a very educational and immensely satisfying day. I know
this is peanuts compared to Real World Problems, but I’m a fixit-guy at heart, 
and seeing those pageload numbers and log entries shrink tickles something in
my brain. And with all I have planned to build, who knows what I’ll get to
fix a month from now!&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">One more step toward the finish line! Today I started with some styling stuff pointed out to me yesterday: the unit conversions on recipe#show are now radio buttons instead of a dropdown, and serving size is a dropdown instead of a number input. I also changed the main search bar and filter button around so you don’t have to go back up from the filter button to click search. Hopefully that makes usage a little clearer until I can add JS to make the filters update as you select them.</summary></entry><entry><title type="html">Nearly There</title><link href="http://localhost:4000/2020/03/30/nearly-there.html" rel="alternate" type="text/html" title="Nearly There" /><published>2020-03-30T00:00:00-04:00</published><updated>2020-03-30T00:00:00-04:00</updated><id>http://localhost:4000/2020/03/30/nearly-there</id><content type="html" xml:base="http://localhost:4000/2020/03/30/nearly-there.html">&lt;p&gt;Been a while since the last post, but I’m finally almost ready to launch! Lots
of fixing small things that keep falling through the cracks because I changed
something ten miles away.&lt;/p&gt;

&lt;p&gt;For example, I updated the way ingredient quantities are recorded; now each
ingredient has a standard 1-person serving size baked in (heh) in two different
ways: 1 “show” amount and unit that appears on the recipe, and one “list”
amount and unit that will get used in the grocery list when I eventually get to
that feature. This way you can pick five recipes that each call for “2 carrots”
but the grocery list will tell you to get 3 lbs. of carrots instead of 10
individuals.&lt;/p&gt;

&lt;p&gt;This is a little less flexible than the old way (per-recipe ingredient
quantities saved on the recipe-ingredient join table), as it assumes all recipes use
roughly the same amount of a given ingredient per person, but it’s much faster
for defining new recipes (I just check the box if the ingredient is required),
and much less data to worry about maintaining - ingredient quantities are calculated
from one central place rather than each living on their own table.&lt;/p&gt;

&lt;p&gt;Farther down the road I’m going to re-add recipe-specific amounts with some
kind of “fudge factor,” but most recipes actually do use the same amount of
things give or take, and flavor experience comes down to which foods and
flavorings you combine, at least for most simple meals, which is what I’m
targeting for now. Baking is another matter,
which is why that can was firmly kicked. I’ll also allow future users to save
customized amounts of ingredients on their saved recipes as they experiment and
find their particular taste, which will give people another reason to sign up.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Despite all this, progress feels slow even though I’m checking things off every
day. I totally get why everyone says you have to focus on “just
shipping it.” Yet, I’ve reached a minor milestone - I’m finally adding more
things to the “post-release” to-do list than the “gotta do this right now”
list. All I have left is adding some more actual content, a few minor
style/color things, tidying up the routing file, and setting up emails for
signup confirmations and password resets. After that I’m gonna announce to
friends and family, and MAYBE re-do the card graphics without anti-aliasing, or
at least with a proper font that has the pixelated look, since the 
anti-aliasing on the fixed width graphics is fuzzy on larger screens.&lt;/p&gt;

&lt;p&gt;After it’s live I’ll be diving into basic test coverage, and later some kind of
log filtering so I can see errors at a glance. Or at least, I’ll get a little more
familiar with Heroku’s addons and options.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;On a personal note, the coronavirus pandemic got me down a bit - it’s hard to
focus and stay excited about getting a new job while everyone else is
scrambling to keep theirs. Honestly, I’m a little worried about downsizing
happening right when I start looking in a couple weeks. I think that’s just my
paranoia talking though - no one is me but me, so I’ll just keep plugging
away at my portfolio and focus on building skills instead of worrying about
competition. There’s always more dev work, so I’m sure there’s a place out
there for me somewhere!&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">Been a while since the last post, but I’m finally almost ready to launch! Lots of fixing small things that keep falling through the cracks because I changed something ten miles away.</summary></entry><entry><title type="html">Ui Graphics</title><link href="http://localhost:4000/2020/03/19/UI-graphics.html" rel="alternate" type="text/html" title="Ui Graphics" /><published>2020-03-19T00:00:00-04:00</published><updated>2020-03-19T00:00:00-04:00</updated><id>http://localhost:4000/2020/03/19/UI-graphics</id><content type="html" xml:base="http://localhost:4000/2020/03/19/UI-graphics.html">&lt;p&gt;OK! After a lot of trial and error, now there’s a (relatively) consistent
look-and-feel to the UI. I’m going for a vaguely-SNES-retro-game theme, just
enough to appeal to the kind of people who spend a lot of time at home and want
to learn to cook, but don’t feel like the typical Instagram/influencer cooking
world appeals to their aesthetic, aka…ME.&lt;/p&gt;

&lt;p&gt;I mentioned last time about settling on 350px wide Bootstrap cards, and I spent
half the day yesterday fiddling with pixel art editors (mtpaint and
GraphicsGale) to put together some images to serve as UI elements. I’m using
modified free art from two amazing artists, &lt;a href=&quot;https://www.kenney.nl/&quot;&gt;KenneyNL&lt;/a&gt;
and &lt;a href=&quot;https://henrysoftware.itch.io/pixel-food&quot;&gt;Henry Software&lt;/a&gt;. After an hour or
two getting the link visited/hover styles right and fixing a couple missed
pixels on some of the images, I think I’m finally ready to launch!! Well,
soft-launch at least. I’m not going full announcement mode until after I have
the site up on Heroku and full of at least 100 recipes. That’s going to take
some time though, since typing everything in takes a while, plus I have to add
all the tags and ingredients too. The admin pages for creating and editing
recipes/ingredients/tags are totally unstyled, but no one will ever see them but
me so I can put that off for now.&lt;/p&gt;

&lt;p&gt;I also thought of adding the recipe tags to the card in the form of little
badges or icons. Besides vegetarian, meatless, vegan, and gluten-free, I’ll also
have paleo, hands-off (meaning most of the time is in the oven or something, or
less than say…10 minutes prep time), and one-pot (everything in one pot,
limited cleanup). Or maybe I’ll just make that one a “limited cleanup” badge?
Either way, after tinkering with the buttons and spacing I decided the badges
are best left to version 2 after launch, better test coverage, and the first big
refactor.&lt;/p&gt;

&lt;p&gt;On a related note, what is the “correct” way to add the first admin user to a
website? I guess I just go into the Rails console and manually make myself an
admin? I’ve already blacklisted the admin attribute out of the user controller,
so I suppose as long as no one gains physical control of my laptop they can’t
make themselves admin, but I’d have bigger problems by then anyway (like nuking
the whole site). I’m pretty noobish with security stuff still, which is a big
reason why I’m using Devise for auth and accounts - I rolled my own when I was
going through the &lt;a href=&quot;https://www.learnenough.com/ruby-on-rails-4th-edition-tutorial/beginning&quot;&gt;Hartl
tutorial&lt;/a&gt;,
and from that experience I learned that I don’t want to reinvent the wheel
unless I absolutely have to.&lt;/p&gt;

&lt;p&gt;Other than that, we’re almost there! I’d also like to add a subtitle to the main
page, something like “recipes without the fluff” but more punny, though I’m not
sure if that’s too much visual clutter. I guess we’ll see. I realized recently
I’ve been avoiding launch, partly because I’m going to have to spend the money
on a real Heroku instance, and partly because once it’s live making changes
won’t be so consequence-free as they are now. But I guess it’s just another
learning opportunity!&lt;/p&gt;

&lt;p&gt;After that’s it’s just one more day for a quick resume site somewhere, and then
it’ll be time to start blasting it all over the internet and find out how many
things I’ve done wrong! Can’t wait! :)&lt;/p&gt;

&lt;h3 id=&quot;quick-update&quot;&gt;Quick update&lt;/h3&gt;
&lt;p&gt;D’oh - I forgot to add a link to the recipe cards that
actually lets you view the dang recipe! And I forgot to style the show
page…oi. So take everything I just said I did and add another 3-5 hours :))))&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">OK! After a lot of trial and error, now there’s a (relatively) consistent look-and-feel to the UI. I’m going for a vaguely-SNES-retro-game theme, just enough to appeal to the kind of people who spend a lot of time at home and want to learn to cook, but don’t feel like the typical Instagram/influencer cooking world appeals to their aesthetic, aka…ME.</summary></entry><entry><title type="html">Designing Recipe Cards</title><link href="http://localhost:4000/2020/03/18/designing-recipe-cards.html" rel="alternate" type="text/html" title="Designing Recipe Cards" /><published>2020-03-18T00:00:00-04:00</published><updated>2020-03-18T00:00:00-04:00</updated><id>http://localhost:4000/2020/03/18/designing-recipe-cards</id><content type="html" xml:base="http://localhost:4000/2020/03/18/designing-recipe-cards.html">&lt;p&gt;I decided to remove the hamburger menu from the mobile view. Like I said
yesterday, I just don’t like the collapse animation. Maybe it’s because my
laptop is underpowered (it’s a $200 HP Stream laptop - I didn’t have a lot of
money to spend), but it also pushed page content around to make room for the
content, and I don’t like that in a navbar. I’m sure there’s ways to make it
pop-over real nice with something marginally more advanced than vanilla
Bootstrap, but I’m not sweating the stylistic details yet, so I settled on the
simple solution: Plain Old Buttons.&lt;/p&gt;

&lt;p&gt;Next, I made the recipe search results into something more than just
plain links. I’m going with Bootstrap’s cards for now, because I’m trying to
keep it simple until I can dive straight into React, and cards are the
easiest/most complete thing that I can set to a fixed width and lay out
responsively. For now the cards are 350px wide, but I noticed that fixed width
elements create a huge amount of white space when the viewport is just under a
multiple of card width (i.e. just barely not big enough to fit an extra one
horizontally). As long as everything stays centered I guess it’s fine for
now.&lt;/p&gt;

&lt;p&gt;Also for the record, getting cards to align and center correctly was a real
pain in the rear, and took lots of fiddling with the padding and margins on the
cards and the container divs. Part of it was my fault, because the layout I’ve
been patching together was an amateurish mess, but also partly because the
Bootstrap spacing utilities measure in rems, so I had to figure out which 
elements needed padding and which needed auto-margin, which meant actually 
needing my brain. Ugh.&lt;/p&gt;

&lt;p&gt;Other minor fixes: the un/favoriting action in the UserProfile controller
redirects back instead of to the recipe show view, so favorites a recipe from
the search results will keep you on the search results (the card has a button,
eventually it’ll be a small heart or something). Still no AJAX, which is 
coming, but for now redirect-back is good enough since the browser remembers 
the filter selections.&lt;/p&gt;

&lt;p&gt;Had a weird problem with the favorite button in the recipes#show view - instead
of putting the recipe ID in the buttons hidden form input, it put a random
nonce. I fiddled with it but ultimately changed nothing, and it went away on 
its own. Weird.&lt;/p&gt;

&lt;p&gt;Finally, I added new columns on the recipe model: prep time, cook time, and a
path for the recipe cover image, which is unused for now. Right now they’re all
displayed as numbers on the recipe card, but I’ll probably replace it with a
visual grid or something to show recipe stats at a glance - meat, vegan,
overall hands-on time required, difficulty (measured by number of steps),
number of ingredients required (which has an impact on difficulty), or if any
rare or exotic ingredients are required. I can do most of this through
ingredient tags and model functions, I just need a sensible way of designing
the UI to show it. I still want to fit in a 350px wide card, but if I make the
350px the short side of the golden ratio, I can extend the vertical length of
the cards from 216px to about 566px. Although I like the keeping the width 
longer than the height, as traditionally recipe cards are 3x5 index cards.&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">I decided to remove the hamburger menu from the mobile view. Like I said yesterday, I just don’t like the collapse animation. Maybe it’s because my laptop is underpowered (it’s a $200 HP Stream laptop - I didn’t have a lot of money to spend), but it also pushed page content around to make room for the content, and I don’t like that in a navbar. I’m sure there’s ways to make it pop-over real nice with something marginally more advanced than vanilla Bootstrap, but I’m not sweating the stylistic details yet, so I settled on the simple solution: Plain Old Buttons.</summary></entry><entry><title type="html">And Now An Actual Update</title><link href="http://localhost:4000/2020/03/16/and-now-an-actual-update.html" rel="alternate" type="text/html" title="And Now An Actual Update" /><published>2020-03-16T01:00:00-04:00</published><updated>2020-03-16T01:00:00-04:00</updated><id>http://localhost:4000/2020/03/16/and-now-an-actual-update</id><content type="html" xml:base="http://localhost:4000/2020/03/16/and-now-an-actual-update.html">&lt;p&gt;Now that the intro stuff is out of the way, here’s what I did today:&lt;/p&gt;

&lt;p&gt;Since Bootstrap is “mobile-first” I focused mainly on mobile styling, fiddling 
with buttons and stuff. I tried putting profile/login/signup links in a 
hamburger menu that only shows on mobile, but the default collapse animation
feels clunky, and I don’t like how it pushes the content down to make room for
the expanded menu. I could probably tinker with the animation, maybe remove it,
but that seems like a lot of work for what amounts to 4 buttons shown 2 at a
time at most (Profile/Logout and Login/Signup). I have a lot of ground to cover
before I can really start showing this off as a portfolio project, so I’m 
trying to avoid rabbit holes.&lt;/p&gt;

&lt;p&gt;I’ve been taking design cues from the amazon mobile site for interacting with a
searchable database of items (well, recipes, but functionally similar just 
without cart+checkout). They use a hamburger/flip-out type menu, but I don’t
imagine I’d ever have as extensive a side-menu as Amazon, and I have some 
pretty strong opinions about UI and hiding things from the user (i.e. don’t do
it unless you really have to), so I think it’s best to just remove the 
hamburger and try to keep the buttons small enough to fit on the header. I also
have an image that brings you back to the home page, and I’d like to add one
more button for “Back to Search,” so I can’t justify a hamburger when there’s
enough space to fit everything without one.&lt;/p&gt;

&lt;p&gt;Finally, I am aware that my UI powers are held back by not using React or some
other modern frontend framework, but I’m still wrapping my head around the 
Rails backend stuff, so I’m keeping it vanilla Rails server-side-rendering for
now. I can always build a React frontend later (and I intend to).&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">Now that the intro stuff is out of the way, here’s what I did today:</summary></entry><entry><title type="html">Begin Hyperchef Log</title><link href="http://localhost:4000/2020/03/16/begin-hyperchef-log.html" rel="alternate" type="text/html" title="Begin Hyperchef Log" /><published>2020-03-16T00:00:00-04:00</published><updated>2020-03-16T00:00:00-04:00</updated><id>http://localhost:4000/2020/03/16/begin-hyperchef-log</id><content type="html" xml:base="http://localhost:4000/2020/03/16/begin-hyperchef-log.html">&lt;p&gt;Well, I guess it’s time I start blogging about this. I’ve been working on
Hyperchef (working title) for about a month now, in place of The Odin Project’s
Rails final project. They wanted me to replicate Facebook, mainly to get
experience with users and ActiveRecord associations. I wanted something
different though, something more useful to me than a fake social media site, so
I’m building a recipe site instead.&lt;/p&gt;

&lt;p&gt;Most advice on finding ideas is a some variant of “solve a problem you have
yourself,” and something I’ve encountered recently while trying to improve my
cooking skills is that all recipe sites are universally &lt;strong&gt;terrible&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;All I wanted was a recipe for Coq Au Vin to impress my wife, but after the 
fifth site in a row made me scroll through ten paragraphs on the author’s 
personal history of cooking to get to the actual instructions, I decided the
internet &lt;em&gt;does&lt;/em&gt; in fact need one more recipe site. One that cuts out all the 
fluff, and maintains the shortest possible distance between “what do I want to
eat” and “here’s how to cook it.” No prose, no extended history of cheese
sauce, just meals with instructions. I also wanted to target people like me,
people who can turn on the oven and fry an egg, but don’t really know all the
ins and outs of cooking techniques, or how long a recipe &lt;em&gt;actually&lt;/em&gt; takes vs. 
how long the author thinks it takes.&lt;/p&gt;

&lt;p&gt;Thus: &lt;a href=&quot;https://hyperchef.herokuapp.com&quot;&gt;Hyperchef&lt;/a&gt;. I’ve probably already spent
more time on this than I would have on the final project, mainly due to the 
more complicated data models I’ve put together to support features that won’t
get built for some time. Instead of each recipe having a table of ingredients
with a little sprinkling of JS to change number of servings or from imperial to
metric units, everything lives in its own table in the database exactly once - 
even ingredients. Recipes are basically just a set of text steps and a bunch of
references to ingredients and what cookware is involved. Quantities of 
ingredients are saved on the join model between recipes and ingredients. I’m 
not sure if it’s actually more “efficient” than just writing a recipe on a page
and doing everything with JS, but I’m pretty proud of myself for putting it all
together. Once I add users and saving favorite recipes I’ll have covered 
everything the Odin Project wanted me to get out of the final project, but I’ll
probably keep going a bit further. I want to be able to take those favorite
recipes, add them to a weekly meal planner (or at least to a titled list), and
press a button to get a tabulated grocery list that sums all the ingredients
from all the recipes you picked for easy shopping. That’s the tool I want that
doesn’t exist, so once I can do all that I think I’ll be satisfied.&lt;/p&gt;</content><author><name>chris</name></author><summary type="html">Well, I guess it’s time I start blogging about this. I’ve been working on Hyperchef (working title) for about a month now, in place of The Odin Project’s Rails final project. They wanted me to replicate Facebook, mainly to get experience with users and ActiveRecord associations. I wanted something different though, something more useful to me than a fake social media site, so I’m building a recipe site instead.</summary></entry></feed>